import numpy as np
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
from sklearn.metrics import classification_report, confusion_matrix


# 数据预处理
# 训练集、验证集和测试集的路径
train_data_dir = 'C:/Users/pjrme/Desktop/0001/dog_cat_classify/dog_cat_classify/data/training_data'
validation_data_dir = 'C:/Users/pjrme/Desktop/0001/dog_cat_classify/dog_cat_classify/data/.ipynb_checkpoints'  # 假设这是正确的路径
test_data_dir = 'C:/Users/pjrme/Desktop/0001/dog_cat_classify/dog_cat_classify/data/testing_data'

# 实例化ImageDataGenerator对象
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_datagen = ImageDataGenerator(rescale=1./255)  # 测试集不需要数据增强

# 使用flow_from_directory方法加载数据
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(150, 150),
    batch_size=20,
    class_mode='binary'
)

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(150, 150),
    batch_size=20,
    class_mode='binary'
)

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(150, 150),
    batch_size=20,
    class_mode='binary'
)


# 模型构建
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])


# 编译模型
model.compile(loss='binary_crossentropy',
              optimizer=Adam(learning_rate=1e-4),
              metrics=['accuracy'])


# 训练模型
history = model.fit(
    train_generator,
    steps_per_epoch=100,  # 每个epoch训练的批次数
    epochs=30,
    validation_data=validation_generator,
    validation_steps=50  # 每个epoch验证的批次数
)



# 模型评估
scores = model.evaluate(
    test_generator,
    steps=50  # 测试集的批次数
)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])




# 结果分析
# 这里可以添加代码来打印分类报告和混淆矩阵
# 例如：
y_pred = model.predict(test_generator, steps=50)
y_pred_classes = (y_pred > 0.5)
y_true = test_generator.classes
print(confusion_matrix(y_true, y_pred_classes))
print(classification_report(y_true, y_pred_classes))



# 保存模型
model.save('cat_dog_classifier.h5')